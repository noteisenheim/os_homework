Prevention - is good, as it does not allow any deadlock to occure (it ensures that at least one of the deadlock conditions does not hold at any time). The disadvantage is that it utilizes a lot of resources, thus, badly affects on performance and throughput. Hence, it is good to use when we do not care about throughput but it is necessary to make sure that no deadlock happens. For example, storing, retrieving and changing data about Stalin's look-a-likes, where the loss of the data may be crucial.
Avoidance - needs less resources than prevention, but the matter is that we should know the resource usage for the future. Thus, this algorithm is useless for the unpredictable systems. As the example, this algorithm is quite a good decision for banking systems.
Recovery - completely different way of dealing with deadlocks, rather than reduce their possible amount we just decide to meet them face to face. It works best at a systems in which we care about the throughput and which are probably not going to have so frequently occuring deadlocks. For example, a phone user will be annoyed because of the poor throughput, so it's okay to deal with problems as they occur.
The ostrich algorithm - stick your head in the sand and pretend there is no problem - the best algorithm for any case.